.erg_parser = pyimport "erg_parser"

.Package: ClassType
.Package.
    name: Str
    as_name: Str
    version: Str
    path: Str or NoneType
    __call__: (name: Str, as_name: Str, version: Str, path: Str or NoneType) -> .Package

.Compiler: ClassType
.Compiler.
    __call__: (pkgs: [.Package; _]) -> .Compiler
    compile: (self: .Compiler, code: Str, mode: Str) -> Code
    compile_file: (self: .Compiler, path: Str) -> Code
    compile_ast: (self: .Compiler, ast: .erg_parser.ast.AST, mode: Str) -> Code

.compile: (code: Str, mode: Str) -> Code
.compile_with_dependencies: (code: Str, mode: Str, deps: [.Package; _]) -> Code
.compile_ast: (ast: .erg_parser.ast.AST, mode: Str) -> Code
.compile_ast_with_dependencies: (ast: .erg_parser.ast.AST, mode: Str, deps: [.Package; _]) -> Code
.compile_file: (path: Str) -> Code
.compile_file_with_dependencies: (path: Str, deps: [.Package; _]) -> Code
.exec: (code: Str) -> GenericModule
.exec_with_dependencies: (code: Str, deps: [.Package; _]) -> GenericModule
.exec_ast: (ast: .erg_parser.ast.AST) -> GenericModule
.exec_ast_with_dependencies: (ast: .erg_parser.ast.AST, deps: [.Package; _]) -> GenericModule
.exec_file: (path: Str) -> GenericModule
.exec_file_with_dependencies: (path: Str, deps: [.Package; _]) -> GenericModule
.__import__: (name: Str) -> GenericModule
